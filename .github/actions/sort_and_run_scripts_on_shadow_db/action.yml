# .github/actions/sort_and_run_scripts_on_shadow_db/action.yml
name: 'Retrieve id of resource by name or tag key-value pair'
description: 'This action retrieves the id/dns name etc of the resource'
inputs:
  folder-name:
      description: 'Folder name from where to pick the script file'
      required: true
  db-current-version:
        description: 'Currently deployed DB script version'
        required: true
  scripts-file-hash:
      description: 'JSON of hash of the script file names along with their sequence number'
      required: true
  pg_host:
      description: ''
      required: true
  pg_user:
      description: ''
      required: true
  pg_password:
     description: ''
     required: true
  pg_db:
     description: ''
     required: true
  pg_port:
     description: ''
     required: true     
outputs:
  scripts_for_prod_json:
    description: 'Scripts for Production JSON'
    
  can_run_on_prod:
    description: 'Can run on Production, as per execution on Shadow DB.'
      
runs:
  using: 'docker'
  image: 'docker://postgres:latest'
  args:
     - sh
     - -c
     - |
        migrationFolder="${{ inputs.folder-name }}"
        migrationHistoryVersion="${{ inputs.db-current-version }}"
        # Access the hashmap JSON string           
        hashmap_json=${{ inputs.scripts-file-hash }}
        
        echo "MigrationHistoryVersion: $migrationHistoryVersion"
        echo "Script files: $hashmap_json"
        echo "Folder name: $migrationFolder"

        declare -A hashmap
        declare -A scriptToExecute
        i=0
        j=0

        # Deserialize JSON to an associative array
        IFS=':,{}' read -ra tempArray <<< "$hashmap_json"           
        
        for key in ${tempArray[@]}; do
            i=$((i + 1))      
            if [ $(($i%2)) == 0 ]; then                                         
                hashmap["${tempArray[$((i-1))]}"]="${key}"                       
            else                 
                tempkey="${key}"                 
            fi
        done

        #output the hashed set from the step.
        sorted_keys=($(for key in "${!hashmap[@]}"; do echo "$key"; done | sort))

        can_run_on_prod=true
        echo "Running scripts over Shadow db...."
        for key in "${sorted_keys[@]}"; do              
            value=${hashmap[$key]}
            file="${migrationFolder}/${value}"
            
            echo "Executing script file: ${file}"
            export PGPASSWORD=${pg_password}
            query_output=$(psql -h $pg_host -p $pg_port -U $pg_user  -d $pg_db  -f "$file" 2>&1)
            
            # Convert output to lowercase
            converted_output="${query_output,,}"
            echo "Query output: ${converted_output}"
            echo "-----------------------------------------------------------------------"

            if echo "$converted_output" | grep -q "error"; then
                can_run_on_prod=false
                echo -e "\033[0;31mError in script execution. Can not run on Prod.\033[0m"
                break;
            fi
        done
        
        echo "Execution completed on Shadow db."
        echo "can_run_on_prod=$can_run_on_prod" >>"$GITHUB_OUTPUT"

        # Create the array of filenames to execute on Prod
        if [ "$can_run_on_prod" = true ]; then
              for key in "${!hashmap[@]}"; do             
                if(($key>$migrationHistoryVersion)); then 
                    scriptToExecute[$j]="${hashmap[$key]}"
                    j=$((j + 1))
                fi
              done
        fi

        #convert into a json to output the same.
        scripts_for_prod=$(IFS=,; echo "${scriptToExecute[*]}")
        echo "scripts_for_prod_json=$scripts_for_prod" >> $GITHUB_OUTPUT
        echo "can_run_on_prod=$can_run_on_prod" >> "$GITHUB_OUTPUT"
     
    