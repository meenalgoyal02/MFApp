# .github/actions/get_resource_by_id/action.yml
name: 'Retrieve id of resource by name or tag key-value pair'
description: 'This action retrieves the id/dns name etc of the resource'
inputs:
  aws-access-key-id:
      description: 'AWS Access Key ID'
      required: true
  aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
  aws-region:
      description: 'AWS Region'
      required: true
  resource-type:
        description: 'The type of resource for whome id is required.Possible values are: ALB/ecs-cluster/ecs-service/hosted-zone '
        required: false
        default: 'ALB'
  resource-name:
        description: 'Resource name for which id is needed. In case of ecs-service, this must be cluster-arn.'
        required: true
        default: ''
  resource-tag-name:
        description: 'Resource tag name. In case of ecs cluster/service, it is mandatory'
        required: false
        default: ''
  resource-tag-value:
        description: 'Resource tag value. In case of ecs cluster/service, it is mandatory'
        required: false
        default: ''
outputs:
  resource-id:
    description: 'Resource id'    
    value: ${{ steps.retrieve-dns-name.outputs.resource-id }}
runs:
  using: 'composite'
  steps:
    - name: Retrieve DNS name
      id: retrieve-dns-name
      run:  |  
        tagKey=${{ inputs.resource-tag-name }}
        tagValue=${{ inputs.resource-tag-value }}
        resourceName=${{ inputs.resource-name }}
        resourceType=${{ inputs.resource-type }}

        if [ "${{ inputs.resource-type }}" == 'ALB' ]; then
          if [ -z "${{ inputs.resource-name }}" ]; then
              # Retrieve by tag
              load_balancer_arns=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerArn' --region ${{ inputs.aws-region }} --output text)

              # Step 2: Find the load balancer ARN by tag name
              for arn in $load_balancer_arns; do
                  tags=$(aws elbv2 describe-tags --resource-arns $arn --query 'TagDescriptions[0].Tags' --region ${{ inputs.aws-region }} --output json)
                  
                  name=$(echo $tags | jq -r --arg TAG_KEY "$tagKey" --arg TAG_VALUE "$tagValue" '.[] | select(.Key == $TAG_KEY and .Value == $TAG_VALUE) | .Value')

                    if [ "${name}" == "${tagValue}" ]; then
                        load_balancer_arn=$arn
                        break
                    fi
                  
              done

              # Check if the load balancer ARN was found
              if [ -z "$load_balancer_arn" ]; then
                echo "Load balancer with tag ${tagKey}=${tagValue} not found."
                exit 1
              fi

              # Step 3: Retrieve the DNS name of the load balancer
              dns_name=$(aws elbv2 describe-load-balancers --load-balancer-arns "$load_balancer_arn" --query 'LoadBalancers[0].DNSName' --region ${{ inputs.aws-region }} --output text)
              echo "DNS name by tag name:-$dns_name"
          else
              dns_name=$(aws elbv2 describe-load-balancers --names ${{ inputs.resource-name }} --region ${{ inputs.aws-region }}| jq -r '.LoadBalancers[0].DNSName')
              echo "DNS name by ALB name:-$dns_name"
          fi;
          echo "resource-id=$dns_name">> "$GITHUB_OUTPUT" 
        elif[ "$resourceType" == 'ecs-cluster' ]; then
         
            ecs_clusters=$(aws ecs list-clusters)

            for cluster in $ecs_clusters; do
              tag=$(aws ecs describe-clusters --clusters cluster --include TAGS --query clusters[*].tags[?key==\`${tagKey}\`] --output text)
               echo "Output tag value-${tag}"
                               
              if [[ "$tag" == *${tagValue}* ]]; then
                cluster_arn=$cluster
                echo "Cluster-arn:$cluster_arn"
                echo "resource-id=$cluster_arn">> "$GITHUB_OUTPUT" 
                break;
              fi 

            done
         
        elif[ "$resourceType" == 'ecs-service' ]; then 
          if [-z "$resourceName"]; then
              ecs_services=$(aws ecs list-services --cluster $resourceName --query serviceArns[*] --output text)

              for service in $ecs_services; do
                tag=$(aws ecs describe-services --services $service --cluster $resourceName --include TAGS --query services[*].tags[?key==\`${tagKey}\`] --output text)

                echo "Output tag value-${tag}"
                                
                if [[ "$tag" == *${tagValue}* ]]; then
                  service_arn=$service
                  echo "Service-arn:$service_arn"
                  echo "resource-id=$service_arn">> "$GITHUB_OUTPUT" 
                  break;
                fi 
              done
          fi;
        else
          if [ -z "${{ inputs.resource-name }}" ]; then
            # Retrieve by tag
            hosted_zone_ids=$(aws route53 list-hosted-zones --query 'HostedZones[*].Id' --output text)         

            # Step 2: Find the hosted zone by its tag
            for temp_id in $hosted_zone_ids; do
                 id=$(echo $temp_id | sed 's#/hostedzone/##')
                 tag=$(aws route53 list-tags-for-resource --resource-type hostedzone --resource-id $id  --query ResourceTagSet.Tags[?Key==\`${tagKey}\`] --output text)

                 echo "Output tag value-${tag}"
                               
                if [[ "$tag" == *${tagValue}* ]]; then
                  hostedzone_id=$id
                  break;
                fi 
            done
          else
              hostedzone_id_temp=$(aws route53 list-hosted-zones --query HostedZones[?Name==\`${resourceName}\`].Id --output text)
              hostedzone_id=$(echo $hostedzone_id_temp | sed 's#/hostedzone/##')
              echo "HostedZone-$hostedzone_id"              
          fi;
          echo "Resource-id:$hostedzone_id"
          echo "resource-id=$hostedzone_id">> "$GITHUB_OUTPUT" 
        fi;        
      shell: bash