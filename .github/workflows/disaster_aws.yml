name: Simulate disaster in specified region.
on:  
  workflow_call:
      secrets:    
        AWS_ACCESS_KEY_ID:
              required: true
              
        AWS_SECRET_ACCESS_KEY:
                  required: true
        SMTP_PASSWORD:
                required: true
                  


jobs:
    aws-cli-in-github-actions:
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        
        - name: Set Environment Variables from File
          uses: ./.github/actions/setup-environment
          with:
              var_file_path: ./.github/variables/disaster_aws.env

        - uses: actions/setup-python@v2
          with:
            python-version: '3.10'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install awscli               

        - name: Retrieve DNS name of load balancer for primary region
          id: primary-alb-dns-name 
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_PRIMARY_REGION }}              
            resource-type: 'ALB'               
            resource-name: ${{ env.ASG_NAME }}               
            resource-tag-name: ${{ env.ALB_TAG_KEY }}              
            resource-tag-value: ${{ env.ALB_TAG_VALUE }}   
                    
        - name: Retrieve id of hosted-zone
          id: get-hosted-zone-id-by-name
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_PRIMARY_REGION }}              
            resource-type: 'hosted-zone'               
            resource-name: ${{ env.HOSTED-ZONE-NAME }}               
            resource-tag-name: ${{ env.ALB_TAG_KEY }}              
            resource-tag-value: ${{ env.ALB_TAG_VALUE }}

        - name: Set primary region CNAME weight to 0
          id: disaster-in-primary-region
          if: ${{ steps.primary-alb-dns-name.outputs.resource-id !='' }}
          run: |
               hosted_zone_id=${{ steps.get-hosted-zone-id-by-name.outputs.resource-id }}
               echo "Hosted-zone id-$hosted_zone_id"
               echo "DNS name of ALB-${{ steps.primary-alb-dns-name.outputs.resource-id }}"
               
               CHANGE_OUTPUT=$(aws route53 change-resource-record-sets --hosted-zone-id ${hosted_zone_id} --change-batch "{ \"Comment\": \"Changes weights of ACTIVE region from 100 to 0\",\"Changes\": [{ \"Action\": \"UPSERT\",
               \"ResourceRecordSet\": {\"Name\": \"${{ env.CNAME }}\", \"Type\": \"CNAME\", \"SetIdentifier\": \"${{ env.PRIMARY_CNAME_IDENTIFIER }}\",\"Weight\": 0,\"TTL\":60,\"ResourceRecords\":[{\"Value\":\" ${{ steps.primary-alb-dns-name.outputs.resource-id }} \"}]  }}]}")
               
                echo "Change Output: $CHANGE_OUTPUT"
                CHANGE_ID=$(echo $CHANGE_OUTPUT | jq -r '.ChangeInfo.Id')
                echo "Change ID: $CHANGE_ID"
                echo "::set-output name=change_id::$CHANGE_ID"

        - name: Wait for Route53 Change to Become INSYNC
          id: wait-for-insync-primary
          run: |
                   CHANGE_ID=${{ steps.disaster-in-primary-region.outputs.change_id }}
                   STATUS="PENDING"
                   while [ "$STATUS" != "INSYNC" ]; do
                     echo "Waiting for change $CHANGE_ID to become INSYNC..."
                     STATUS=$(aws route53 get-change --id $CHANGE_ID | jq -r '.ChangeInfo.Status')
                     echo "Current status: $STATUS"
                     if [ "$STATUS" != "INSYNC" ]; then
                       echo "Not in sync yet. Sleeping for 30 seconds..."
                       sleep 30
                     fi
                   done
                   echo "Change $CHANGE_ID is now INSYNC." 

        - name: Set ASG capacity in primary region
          id: disaster-recovery-ASG        
          run: |
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --desired-capacity 0 --min-size 0 --max-size 0 --region $AWS_PRIMARY_REGION
         
        - name: Verify whether the URL is down or not
          continue-on-error: true
          id: verify-region-is-down
          run: |  
            sleep 60                   
            HTTP_STATUS=$(curl -s -o /dev/null -I -w "%{http_code}" "${{ env.CNAME }}")
            echo "HTTP Status- ${HTTP_STATUS}"
            if [ "$HTTP_STATUS" -eq 503 ]; then
              echo "Region down completed."
              echo "::set-output name=Region-down::true"
              echo "::set-output name=Email-subject:: Primary region is down for Repository- ${{ github.repository }}"
            else
              echo "Region down could not be completed."
              echo "::set-output name=Region-down::false"
              echo "::set-output name=Email-subject:: Failed in setting Primary region down. "
            fi

        - name: Send notification email          
          uses: dawidd6/action-send-mail@v3
          with:
              server_address: smtp.gmail.com
              server_port: 465
              secure: true
              from:  ${{ env.SENDER_EMAIL_ID }}
              to: ${{ env.RECEIVER_EMAIL_ID }}
              username:  ${{env.SENDER_EMAIL_ID}}
              password: ${{ secrets.SMTP_PASSWORD }}
              subject: ${{ steps.verify-region-is-down.outputs.Email-subject }}                  
              body:  |
                  Gameday Preparation completed with the run of GitHub workflow. Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  Please check the application and take recovery steps, as required.
                  

        
       