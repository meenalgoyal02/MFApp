name: Simulate disaster in specified region.
on:  
  workflow_call:
      secrets:    
        AWS_ACCESS_KEY_ID:
              required: true
              
        AWS_SECRET_ACCESS_KEY:
                  required: true
        SMTP_PASSWORD:
                required: true
      outputs:
            region-failover-successful:
              description: "Boolean value to indicate whether region down was successful or not"
              value: ${{ jobs.aws-cli-in-github-actions.outputs.region-down-or-not }}   
            conclusion:
               description: "Conclusion text that can be sent for notification"             
               value: ${{ jobs.aws-cli-in-github-actions.outputs.conclusion }}   


jobs:
    aws-cli-in-github-actions:
      outputs: 
        region-down-or-not: ${{ steps.verify-region-is-down.outputs.Region-down }}
        conclusion: ${{ steps.conclusion.outputs.value }}
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        
        - name: Set Environment Variables from File
          uses: ./.github/actions/setup-environment
          with:
              var_file_path: ./.github/variables/disaster_aws.env

        - uses: actions/setup-python@v2
          with:
            python-version: '3.10'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install awscli 
        
        - name: start date and time
          id: start-date
          run: |
             currentDate=$(echo $(date))
             echo "Current date-${currentDate}"
             echo "value=$currentDate">>"$GITHUB_OUTPUT"
            
        - name: Retrieve DNS name of load balancer for primary region
          id: primary-alb-dns-name 
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_PRIMARY_REGION }}              
            resource-type: 'ALB'               
            resource-name: ${{ env.ASG_NAME }}               
            resource-tag-name: ${{ env.ALB_TAG_KEY }}              
            resource-tag-value: ${{ env.ALB_TAG_VALUE }}   
                    
        - name: Retrieve id of hosted-zone
          id: get-hosted-zone-id-by-name
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_PRIMARY_REGION }}              
            resource-type: 'hosted-zone'               
            resource-name: ${{ env.HOSTED-ZONE-NAME }}               
            resource-tag-name: ${{ env.ALB_TAG_KEY }}              
            resource-tag-value: ${{ env.ALB_TAG_VALUE }}

        - name: Set primary region CNAME weight to 0
          id: disaster-in-primary-region
          if: ${{ steps.primary-alb-dns-name.outputs.resource-id !='' }}
          run: |
               hosted_zone_id=${{ steps.get-hosted-zone-id-by-name.outputs.resource-id }}
               echo "Hosted-zone id-$hosted_zone_id"
               echo "DNS name of ALB-${{ steps.primary-alb-dns-name.outputs.resource-id }}"
               
               CHANGE_OUTPUT=$(aws route53 change-resource-record-sets --hosted-zone-id ${hosted_zone_id} --change-batch "{ \"Comment\": \"Changes weights of ACTIVE region from 100 to 0\",\"Changes\": [{ \"Action\": \"UPSERT\",
               \"ResourceRecordSet\": {\"Name\": \"${{ env.CNAME }}\", \"Type\": \"CNAME\", \"SetIdentifier\": \"${{ env.PRIMARY_CNAME_IDENTIFIER }}\",\"Weight\": 0,\"TTL\":60,\"ResourceRecords\":[{\"Value\":\" ${{ steps.primary-alb-dns-name.outputs.resource-id }} \"}]  }}]}")
               
                echo "Change Output: $CHANGE_OUTPUT"
                CHANGE_ID=$(echo $CHANGE_OUTPUT | jq -r '.ChangeInfo.Id')
                echo "Change ID: $CHANGE_ID"
                echo "::set-output name=change_id::$CHANGE_ID"

        - name: Wait for Route53 Change to Become INSYNC
          id: wait-for-insync-primary
          run: |
                   CHANGE_ID=${{ steps.disaster-in-primary-region.outputs.change_id }}
                   STATUS="PENDING"
                   while [ "$STATUS" != "INSYNC" ]; do
                     echo "Waiting for change $CHANGE_ID to become INSYNC..."
                     STATUS=$(aws route53 get-change --id $CHANGE_ID | jq -r '.ChangeInfo.Status')
                     echo "Current status: $STATUS"
                     if [ "$STATUS" != "INSYNC" ]; then
                       echo "Not in sync yet. Sleeping for 30 seconds..."
                       sleep 30
                     fi
                   done
                   echo "Change $CHANGE_ID is now INSYNC." 

        - name: Set ASG capacity in primary region
          id: disaster-simulation-ASG        
          run: |
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --desired-capacity 0 --min-size 0 --max-size 0 --region $AWS_PRIMARY_REGION
         
        - name: Verify whether the URL is down or not
          continue-on-error: true
          id: verify-region-is-down
          run: |  
            sleep 120                   
            HTTP_STATUS=$(curl -s -o /dev/null -I -w "%{http_code}" "${{ env.CNAME }}")
            echo "HTTP Status- ${HTTP_STATUS}"
            if [ "$HTTP_STATUS" -eq 503 ]; then
              echo "Region down completed."
              echo "::set-output name=Region-down::true"
              echo "::set-output name=Email-subject:: Primary region is down for Repository- ${{ github.repository }}"
            else
              echo "Region down could not be completed."
              echo "::set-output name=Region-down::false"
              echo "::set-output name=Email-subject:: Failed in setting Primary region down. "
            fi
        
        - name: end date and time
          id: end-date
          run: |
              currentDate=$(echo $(date))
              echo "Current date-${currentDate}"
              echo "value=$currentDate">>"$GITHUB_OUTPUT"
        - name: action run summary
          id: conclusion
          run: |

            outcomeOfHostUpdate="${{ steps.disaster-in-primary-region.outcome }}"
            outcomeOfASGUpdate="${{ steps.disaster-simulation-ASG.outcome }}"

            if [[ "$outcomeOfHostUpdate" == "failure" || "$outcomeOfASGUpdate" == "failure" ]]; then
              value="<h3>Disaster simulation failed.</h3>"
            else
              value="<h3>Disaster simulation completed successfully.</h3>"
            fi
           
            value+="<h4>Conclusion :${{ steps.verify-region-is-down.outputs.Email-subject }}</h4><figure class="table"> <table> <tbody> <tr> <td>1.</td> <td><strong>Activity Name</strong></td> <td>Disaster simulation</td> <td>&nbsp;</td> </tr> <tr> <td>2.</td> <td><strong>AWS Region</strong></td> <td>${{ env.AWS_PRIMARY_REGION }}</td> <td>&nbsp;</td> </tr> <tr> <td>3.</td> <td><strong>Impacted resources</strong></td> <td> <ol> <li>ASG: ${{ env.ASG_NAME }}</li> <li>Hosted-zone:${{ env.CNAME }}</li> </ol> </td> <td>&nbsp;</td> </tr> <tr> <td>4.</td> <td><strong>Activity Start Time</strong></td> <td>${{ steps.start-date.outputs.value }}</td> <td>&nbsp;</td> </tr> <tr> <td>5.</td> <td><strong>Activity End Time</strong></td> <td>${{ steps.end-date.outputs.value }}</td> <td>&nbsp;</td> </tr> </tbody> </table> </figure>"
            
            echo "value=$value">>"$GITHUB_OUTPUT"
            echo "Email content-$value"

        # - name: Send notification email          
        #   uses: dawidd6/action-send-mail@v3
        #   with:
        #       server_address: smtp.gmail.com
        #       server_port: 465
        #       secure: true
        #       from:  ${{ env.SENDER_EMAIL_ID }}
        #       to: ${{ env.RECEIVER_EMAIL_ID }}
        #       username:  ${{env.SENDER_EMAIL_ID}}
        #       password: ${{ secrets.SMTP_PASSWORD }}
        #       subject: ${{ steps.verify-region-is-down.outputs.Email-subject }}                  
        #       body:  |
        #         <h2><strong>Conclusion :${{ steps.verify-region-is-down.outputs.Email-subject }}</strong></h2>
        #         <ol>
        #             <li>Activity Name: Disaster simulation</li>
        #             <li>AWS Region: ${{ env.AWS_PRIMARY_REGION }} </li>
        #             <li>Impacted resources-<ol>
        #                     <li>ASG: ${{ env.ASG_NAME }}</li>
        #                     <li>Hosted-zone:${{ env.CNAME }}</li>
        #                 </ol>
        #             </li>
        #             <li>Activity Start Time:${{ steps.start-date.outputs.value }}</li>
        #             <li>Activity End Time:${{ steps.end-date.outputs.value }}<br>&nbsp;</li>
        #         </ol>
              
                  

        
       