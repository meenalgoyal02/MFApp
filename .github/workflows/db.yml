name: RDS Migration

on: workflow_dispatch

env:
  AWS_REGION: 'us-east-1'
  RDS_HOST:  'pocdb1.ciwtq0frolty.us-east-1.rds.amazonaws.com'
  RDS_PORT: '5432'
  RDS_USERNAME: 'postgres'
  PGPASSWORD: ${{ secrets.RDS_PASSWORDS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MIGRATION_FOLDER: 'src/migrations/ddl'
  MIGRATION_HISTORY_VERSION: '1'

jobs:
  migration-required-or-not:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Install dependencies
      #   run: |
      #     npm install

      # - name: Get migration history version
      #   run: |
      #     # aws rds describe-db-instances --region $AWS_REGION --query DBInstances --output text | grep -oE 'pocdb1'
      #     psql -h $RDS_HOST -p $RDS_PORT -U $RDS_USERNAME     

      - name: Get all the scripts from configured folder
        id: filename_read
        run: |
          declare -a scriptFiles
          declare -A scriptFileHash
          shopt -s dotglob

          for file in $(ls "$MIGRATION_FOLDER"); do
            echo "File name:$file"
            scriptFiles=(${scriptFiles[@]} "$file")
            IFS='_' read -ra splitName <<< "$file"
            scriptFileHash["${splitName[0]}"]="${file}"          
          done

          # Get script file name with succeeding version number
          for key in "${!scriptFileHash[@]}"; do             
              if(($key>=$MIGRATION_HISTORY_VERSION)); then 
                echo "File name is:${scriptFileHash[$key]}"                
                break;
              fi
           done

          #output the hashed set from the step.
          # sorted_keys=($(for key in "${!scriptFileHash[@]}"; do echo "$key"; done | sort))

          # echo "Sorted hashtable contents:"
          # for key in "${sorted_keys[@]}"; do
          #   if(($key>=$MIGRATION_HISTORY_VERSION)); then 
          #     echo "yes"
          #     break;
          #   fi
          #     value=${scriptFileHash[$key]}
          #     echo "Key: $key, Value: $value"
          # done

          # Convert scriptFileHash to JSON string
          hashmap_json=$(jq -n --argjson obj "$(declare -p scriptFileHash | cut -d' ' -f 3-)" '$obj | from_entries')
          
          # Set the output
          echo "::set-output name=scriptFileHash::$hashmap_json"

      - name: Get script file name with succeeding version number
        id: scripts_required_to_run
        run: |
           echo "$steps.filename_read.scriptFileHash"
          #  for key in "${!steps.filename_read.sorted_hashset[@]}"; do
          #     if(($key>=$MIGRATION_HISTORY_VERSION)); then 
          #       echo "yes"
          #       break;
          #     fi
          #  done


      # - name: Run migration script
      #   id: migration_script
      #   continue-on-error: true 
      #   run: |
      #     # Check if the target is not a directory
      #     if [ ! -d "$MIGRATION_FOLDER" ]; then
      #       exit 1
      #     fi
          
      #     # Loop through files in the target directory
      #     for file in "$MIGRATION_FOLDER"/*; do
      #       if [ -f "$file" ]; then
      #         echo "$file"
      #         psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME -f "$file"
      #       fi
      #     done          
      
      # - name: Rollback script
      #   if: steps.migration_script.outcome == 'failure'
      #   run: |
      #    psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME 
      #    rollback;
        
      # - name: Commit script
      #   if: steps.migration_script.outcome == 'success'
      #   run: |
      #    psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME 
      #    commit;
      
