name: RDS Migration

on: push

env:
  AWS_REGION: 'us-east-1'
  RDS_HOST:  'pocdb1.ciwtq0frolty.us-east-1.rds.amazonaws.com'
  RDS_PORT: '5432'
  RDS_USERNAME: 'postgres'
  PGPASSWORD: ${{ secrets.RDS_PASSWORDS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MIGRATION_FOLDER: 'src/migrations/ddl'
  MIGRATION_HISTORY_VERSION: '1'

jobs:
  migration-required-or-not:
    runs-on: ubuntu-latest
    outputs:
      dbUpdateRequired: ${{steps.filename_read.outputs.dbUpdateRequired}}
      scriptFileHash: ${{steps.filename_read.outputs.scriptFileHash}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Install dependencies
      #   run: |
      #     npm install

      # - name: Get migration history version
      #   run: |
      #     # aws rds describe-db-instances --region $AWS_REGION --query DBInstances --output text | grep -oE 'pocdb1'
      #     psql -h $RDS_HOST -p $RDS_PORT -U $RDS_USERNAME     

      - name: Get all the scripts from configured folder
        id: filename_read
        run: |
          declare -a scriptFiles
          declare -A scriptFileHash
          db_updateRequired=false
          shopt -s dotglob

          for file in $(ls "$MIGRATION_FOLDER"); do
            echo "File name:$file"
            scriptFiles=(${scriptFiles[@]} "$file")
            IFS='_' read -ra splitName <<< "$file"
            scriptFileHash["${splitName[0]}"]="${file}"          
          done

          # Get script file name with succeeding version number
          for key in "${!scriptFileHash[@]}"; do             
              if(($key>=$MIGRATION_HISTORY_VERSION)); then 
                db_updateRequired=true
                echo "File name is:${scriptFileHash[$key]}"                
                break;
              fi
           done

           echo "Can run further: ${db_updateRequired}"
          # Convert scriptFileHash to JSON string         
          hashmap_json="{"
          first=true
          for key in "${!scriptFileHash[@]}"; do
            if [ "$first" = true ]; then
              first=false
            else
              hashmap_json+=","
            fi
            hashmap_json+="\"$key\":\"${scriptFileHash[$key]}\""
          done
          hashmap_json+=$(printf '%s' '}')
          
          echo "$hashmap_json"

          # Set the output
          echo "dbUpdateRequired=$db_updateRequired" >> "$GITHUB_OUTPUT"
          echo "scriptFileHash=$hashmap_json">> "$GITHUB_OUTPUT"    
 
  script-validation-on-shadow-db:
    runs-on: ubuntu
    needs: migration-required-or-not
    if: ${{needs.migration-required-or-not.outputs.dbUpdateRequired=='true'}}
    steps: 
      - name: Sort all the script filenames in order        
        id: scripts_required_to_run
        run: |
            declare -A hashmap
            i=0
            echo "${{needs.migration-required-or-not.outputs.filename_read.outputs.scriptFileHash}}"
            # Access the hashmap JSON string
            hashmap_json=${{ needs.migration-required-or-not.outputs.filename_read.outputs.scriptFileHash }}
            
            # Deserialize JSON to an associative array
            IFS=':,{}' read -ra tempArray <<< "$hashmap_json"           
            
            for key in ${tempArray[@]}; do
              i=$((i + 1))      
              if [ $(($i%2)) == 0 ]; then                                         
                 hashmap["${tempArray[$((i-1))]}"]="${key}"                       
              else                 
                 tempkey="${key}"                 
              fi
            done

            for key in "${!hashmap[@]}"; do
              echo "Key: $key, Value: ${hashmap[$key]}"
            done

            #output the hashed set from the step.
            sorted_keys=($(for key in "${!hashmap[@]}"; do echo "$key"; done | sort))
  
            # echo "Sorted hashtable contents:"
            for key in "${sorted_keys[@]}"; do              
                value=${scriptFileHash[$key]}
                echo "Key: $key, Value: $value"
            done


      #- name: run all the scripts of above step in the same order

      
      
            
          #  for key in "${!steps.filename_read.sorted_hashset[@]}"; do
          #     if(($key>=$MIGRATION_HISTORY_VERSION)); then 
          #       echo "yes"
          #       break;
          #     fi
          #  done


      # - name: Run migration script
      #   id: migration_script
      #   continue-on-error: true 
      #   run: |
      #     # Check if the target is not a directory
      #     if [ ! -d "$MIGRATION_FOLDER" ]; then
      #       exit 1
      #     fi
          
      #     # Loop through files in the target directory
      #     for file in "$MIGRATION_FOLDER"/*; do
      #       if [ -f "$file" ]; then
      #         echo "$file"
      #         psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME -f "$file"
      #       fi
      #     done          
      
      # - name: Rollback script
      #   if: steps.migration_script.outcome == 'failure'
      #   run: |
      #    psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME 
      #    rollback;
        
      # - name: Commit script
      #   if: steps.migration_script.outcome == 'success'
      #   run: |
      #    psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME 
      #    commit;
       
   