name: DB script execution automation

on: push

env:
  AWS_REGION: 'us-east-1'
  RDS_HOST:  'pocdb1.ciwtq0frolty.us-east-1.rds.amazonaws.com'
  RDS_PORT: '5432'
  RDS_USERNAME: 'postgres'
  PGPASSWORD: ${{ secrets.RDS_PASSWORDS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MIGRATION_FOLDER: 'src/migrations/ddl' 
  MIGRATION_SEQUENCE: 'DDL SP TRIGGER' 
jobs:
  migration-required-or-not:
    runs-on: ubuntu-latest
    outputs:
      dbUpdateRequired: ${{steps.filename_read.outputs.dbUpdateRequired}}
      scriptFileHash: ${{steps.filename_read.outputs.scriptFileHash}}
      migrationHistoryVersion: ${{steps.get_migration_history.outputs.MigrationHistoryVersion}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          npm install

      - name: Get migration history version
        id: get_migration_history
        run: |
          # aws rds describe-db-instances --region $AWS_REGION --query DBInstances --output text | grep -oE 'pocdb1'          
          query_output=$(psql -h $RDS_HOST -p $RDS_PORT -U $RDS_USERNAME -d poc -t -c "select product_version from \"__MigrationsHistory\" order by migration_id desc limit 1" 2>&1)         
          echo "::set-output name=migration_history_version::$query_output"       
          echo "MigrationHistoryVersion=$query_output">> "$GITHUB_OUTPUT" 
          
      - name: Get all the scripts from configured folder
        id: filename_read
        run: |
          migrationHistoryVersion="${{ steps.get_migration_history.outputs.migration_history_version }}"
          echo "migrationHistoryVersion: $migrationHistoryVersion"
          shopt -s dotglob

          for file in $(ls "$MIGRATION_FOLDER"); do
            echo "File name:$file"
            scriptFiles=(${scriptFiles[@]} "$file")
            IFS='_' read -ra splitName <<< "$file"
            scriptFileHash["${splitName[0]}"]="${file}"          
          done

          # Get script file name with succeeding version number
          for key in "${!scriptFileHash[@]}"; do                    
              if [ "$key" -gt "$migrationHistoryVersion" ];then 
                db_updateRequired=true
                echo "There is a script file with higher version number than Migration History version."                
                break;
              fi
           done

          # echo "Can run further: ${db_updateRequired}"
          # Convert scriptFileHash to JSON string         
          hashmap_json="{"
          first=true
          for key in "${!scriptFileHash[@]}"; do
            if [ "$first" = true ]; then
              first=false
            else
              hashmap_json+=","
            fi
            hashmap_json+="\"$key\":\"${scriptFileHash[$key]}\""
          done
          hashmap_json+=$(printf '%s' '}')
          
          echo "$hashmap_json"

          # Set the output
          echo "dbUpdateRequired=$db_updateRequired" >> "$GITHUB_OUTPUT"
          echo "scriptFileHash=$hashmap_json">> "$GITHUB_OUTPUT"    
 
  script-validation-on-shadow-db:
    needs: migration-required-or-not
    runs-on: ubuntu-latest    

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: shadowDb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    if: ${{needs.migration-required-or-not.outputs.dbUpdateRequired=='true'}}
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v2

      # Performs a clean installation of all dependencies in the `package.json` file      
      - name: Install dependencies
        run: npm ci

      - name: Get Shadow db version
        id: shadow-db
        run: |
          export PGPASSWORD=postgres
          shadow_db_version_temp=$(psql -h 'localhost' -p '5432' -U postgres  -d shadowDb  -t -c "show server_version;" 2>&1)            
          shadow_db_version=$(echo $shadow_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
          echo "::set-output name=version::$shadow_db_version"
          echo "Shadow db version: $shadow_db_version"

      - name: Get Production db version
        id: prod-db
        run: |
          export PGPASSWORD=${{ secrets.RDS_PASSWORDS }}
          prod_db_version_temp=$(psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME  -t -c "show server_version;" 2>&1)
          prod_db_version=$(echo $prod_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
          echo "Production db version-${prod_db_version}"
          echo "::set-output name=version::$prod_db_version"

      - name: Compare Shadow vs Prod db scripts
        run: |
           echo  "${{ steps.shadow-db.outputs.version }}"
           echo "${{ steps.prod-db.outputs.version }}"
           if [[ "${{ steps.shadow-db.outputs.version }}" != "${{ steps.prod-db.outputs.version }}" ]]; then 
             echo "Warning: Prod db version is not same as shadow db version. Please take corrective action."                                
           fi
     
      - name: Sort all the script filenames & execute them in order        
        id: scripts_required_to_run
        run: |
            migrationHistoryVersion="${{ needs.migration-required-or-not.outputs.MigrationHistoryVersion }}"
            #echo "migrationHistoryVersion: $migrationHistoryVersion"
            declare -A hashmap
            i=0
            #echo "${{needs.migration-required-or-not.outputs.scriptFileHash}}"
            # Access the hashmap JSON string
            hashmap_json=${{ needs.migration-required-or-not.outputs.scriptFileHash }}
            
            # Deserialize JSON to an associative array
            IFS=':,{}' read -ra tempArray <<< "$hashmap_json"           
            
            for key in ${tempArray[@]}; do
              i=$((i + 1))      
              if [ $(($i%2)) == 0 ]; then                                         
                 hashmap["${tempArray[$((i-1))]}"]="${key}"                       
              else                 
                 tempkey="${key}"                 
              fi
            done

            # for key in "${!hashmap[@]}"; do
            #   echo "Key: $key, Value: ${hashmap[$key]}"
            # done

            #output the hashed set from the step.
            sorted_keys=($(for key in "${!hashmap[@]}"; do echo "$key"; done | sort))

            can_run_on_prod=true

            # export PGPASSWORD=postgres
            # shadow_db_version_temp=$(psql -h 'localhost' -p '5432' -U postgres  -d shadowDb  -t -c "show server_version;" 2>&1)            
            # shadow_db_version=$(echo $shadow_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
            # echo "PostgreSQL version: $shadow_db_version"

            echo "Running scripts over Shadow db...."
            for key in "${sorted_keys[@]}"; do              
                value=${hashmap[$key]}
                file="${MIGRATION_FOLDER}/${value}"
                #echo "Key: $key, Value: $value,File path:$file"

                export PGPASSWORD=postgres
                query_output=$(psql -h 'localhost' -p '5432' -U postgres  -d shadowDb  -f "$file" 2>&1)
                #echo "Query output: ${query_output}"

                if echo "$query_output" | grep -q "ERROR"; then
                  can_run_on_prod=false
                  echo "Error in script execution. Can not run on Prod."
                  break;
                fi
            done
            echo "Execution completed on Shadow db."

            if [ "$can_run_on_prod" = true ]; then
              echo "Running scripts on Prod db..."

              # export PGPASSWORD=${{ secrets.RDS_PASSWORDS }}
              # prod_db_version_temp=$(psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME  -t -c "show server_version;" 2>&1)
              # prod_db_version=$(echo $prod_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
              # echo "Production db version-${prod_db_version}"

              # if [[ "$prod_db_version" != "$shadow_db_version" ]];then 
              #   echo "Warning: Prod db version is not same as shadow db version. Please take corrective action."                                
              # fi

              # run incremental scripts on Prod db.
              for key in "${!hashmap[@]}"; do             
              if(($key>$migrationHistoryVersion)); then 
                
                file="${MIGRATION_FOLDER}/${hashmap[$key]}"
                export PGPASSWORD=${{ secrets.RDS_PASSWORDS }}
                echo "Executing file- ${file}"
                psql -h $RDS_HOST -d poc -p $RDS_PORT -U $RDS_USERNAME -f "$file"           
              fi
              done
            fi
                
      

       
   