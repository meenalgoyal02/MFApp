name: DB script execution automation

on: workflow_dispatch

env:
  PGPASSWORD: ${{ secrets.RDS_PASSWORDS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  migration-required-or-not:
    runs-on: ubuntu-latest
    outputs:
      dbUpdateRequired: ${{steps.filename_read.outputs.dbUpdateRequired}}
      scriptFileHash: ${{steps.filename_read.outputs.scriptFileHash}}
      migrationHistoryVersion: ${{steps.get_migration_history.outputs.MigrationHistoryVersion}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Environment Variables from File
        uses: ./.github/actions/setup-environment
        with:
            var_file_path: ./.github/variables/db_automation.env

      - name: Install dependencies
        run: |
          npm install

      - name: Get migration history version
        id: get_migration_history
        run: |
          # aws rds describe-db-instances --region $AWS_REGION --query DBInstances --output text | grep -oE 'pocdb1'          
          query_output=$(psql -h $RDS_HOST -p $RDS_PORT -U $RDS_USERNAME -d $RDS_DB -t -c "select product_version from \"__MigrationsHistory\" order by migration_id desc limit 1" 2>&1)         
          if [ -z "$query_output" ]; then
            query_output="0"
          fi;
          echo "migration_history_version=$query_output" >> "$GITHUB_OUTPUT"      
          echo "MigrationHistoryVersion=$query_output" >> "$GITHUB_OUTPUT" 
          
      - name: Get all the scripts from configured folder
        id: filename_read
        run: |
          migrationHistoryVersion="${{ steps.get_migration_history.outputs.migration_history_version }}"
          echo "migrationHistoryVersion: $migrationHistoryVersion"
          declare -A scriptToExecute
          i=0
          shopt -s dotglob

          for file in $(ls "$MIGRATION_FOLDER"); do
            echo "File name:$file"
            scriptFiles=(${scriptFiles[@]} "$file")
            IFS='_' read -ra splitName <<< "$file"
            scriptFileHash["${splitName[0]}"]="${file}"          
          done

          # Get script file name with succeeding version number
          for key in "${!scriptFileHash[@]}"; do                    
              if [ "$key" -gt "$migrationHistoryVersion" ];then 
                scriptToExecute[$i]="${scriptFileHash[$key]}"
                i=$((i + 1))
              fi
           done          
          
          if [ ${#scriptToExecute[@]} != 0 ]; then
            db_updateRequired=true
            echo -e "\033[0;32mThere is atleast one script file with higher version number than Migration History version.Following files will be executed on Prod db.\033[0m"            
            for scriptName in "${scriptToExecute[@]}"; do
              echo "${scriptName}"             
            done             
           fi

          # echo "Can run further: ${db_updateRequired}"
          # Convert scriptFileHash to JSON string         
          hashmap_json="{"
          first=true
          for key in "${!scriptFileHash[@]}"; do
            if [ "$first" = true ]; then
              first=false
            else
              hashmap_json+=","
            fi
            hashmap_json+="\"$key\":\"${scriptFileHash[$key]}\""
          done
          hashmap_json+=$(printf '%s' '}')
          
          echo "Debug:"
          echo "$hashmap_json"
          echo "-----------------------------------"

          # Set the output
          echo "dbUpdateRequired=$db_updateRequired" >> "$GITHUB_OUTPUT"
          echo "scriptFileHash=$hashmap_json">> "$GITHUB_OUTPUT"    
 
  script-validation-on-shadow-db:
    needs: migration-required-or-not
    runs-on: ubuntu-latest    

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: shadowDb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    if: ${{needs.migration-required-or-not.outputs.dbUpdateRequired=='true'}}
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v2

      # Performs a clean installation of all dependencies in the `package.json` file      
      - name: Install dependencies
        run: npm ci

      - name: Set Environment Variables from File
        uses: ./.github/actions/setup-environment
        with:
            var_file_path: ./.github/variables/db_automation.env


      - name: Get Shadow db version
        id: shadow-db
        run: |
          export PGPASSWORD=postgres
          shadow_db_version_temp=$(psql -h 'localhost' -p '5432' -U postgres  -d shadowDb  -t -c "show server_version;" 2>&1)            
          shadow_db_version=$(echo $shadow_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
          echo "version=$shadow_db_version" >> "$GITHUB_OUTPUT"
          echo "Shadow db version: $shadow_db_version"

      - name: Get Production db version
        id: prod-db
        run: |
          export PGPASSWORD=${{ secrets.RDS_PASSWORDS }}
          prod_db_version_temp=$(psql -h $RDS_HOST -d $RDS_DB -p $RDS_PORT -U $RDS_USERNAME  -t -c "show server_version;" 2>&1)
          prod_db_version=$(echo $prod_db_version_temp | awk '{print $1}' | cut -d '.' -f1,2)
          echo "Production db version-${prod_db_version}"
          echo "version=$prod_db_version" >> "$GITHUB_OUTPUT"

      - name: Compare Shadow vs Prod db scripts
        run: |
           if [[ "${{ steps.shadow-db.outputs.version }}" != "${{ steps.prod-db.outputs.version }}" ]]; then 
             echo -e "\033[0;33mWarning: Prod db version is not same as shadow db version. Please take corrective action.\033[0m"                                
           fi
     
      - name: Sort all the script filenames & execute them in order        
        id: scripts_required_to_run
        run: |
            migrationHistoryVersion="${{ needs.migration-required-or-not.outputs.MigrationHistoryVersion }}"
            #echo "migrationHistoryVersion: $migrationHistoryVersion"
            declare -A hashmap
            i=0
            #echo "${{needs.migration-required-or-not.outputs.scriptFileHash}}"
            # Access the hashmap JSON string
            hashmap_json=${{ needs.migration-required-or-not.outputs.scriptFileHash }}
            
            # Deserialize JSON to an associative array
            IFS=':,{}' read -ra tempArray <<< "$hashmap_json"           
            
            for key in ${tempArray[@]}; do
              i=$((i + 1))      
              if [ $(($i%2)) == 0 ]; then                                         
                 hashmap["${tempArray[$((i-1))]}"]="${key}"                       
              else                 
                 tempkey="${key}"                 
              fi
            done

            #output the hashed set from the step.
            sorted_keys=($(for key in "${!hashmap[@]}"; do echo "$key"; done | sort))

            can_run_on_prod=true
            echo "Running scripts over Shadow db...."
            for key in "${sorted_keys[@]}"; do              
                value=${hashmap[$key]}
                file="${MIGRATION_FOLDER}/${value}"
               
                echo "Executing script file: ${file}"
                export PGPASSWORD=postgres
                query_output=$(psql -h 'localhost' -p '5432' -U postgres  -d shadowDb  -f "$file" 2>&1)
                # Convert output to lowercase
                converted_output="${query_output,,}"
                echo "Query output: ${converted_output}"
                echo "-----------------------------------------------------------------------"

                if echo "$converted_output" | grep -q "error"; then
                  can_run_on_prod=false
                  echo -e "\033[0;31mError in script execution. Can not run on Prod.\033[0m"
                  break;
                fi
            done
            echo "Execution completed on Shadow db."

            if [ "$can_run_on_prod" = true ]; then
              echo "Running scripts on Prod db..."
              # run incremental scripts on Prod db.
              for key in "${!hashmap[@]}"; do             
                if(($key>$migrationHistoryVersion)); then 
                  
                  file="${MIGRATION_FOLDER}/${hashmap[$key]}"
                  export PGPASSWORD=${{ secrets.RDS_PASSWORDS }}
                  echo "Executing file- ${file}"
                  psql -h $RDS_HOST -d $RDS_DB -p $RDS_PORT -U $RDS_USERNAME -f "$file"           
                fi
              done
              echo -e "\033[0;32mExecution completed on Production db.\033[0m"
            fi
            echo "shadow_db_run_successful=$can_run_on_prod" >> "$GITHUB_OUTPUT"
      
      - name: Notification Content
        id: notification-content
        run: |    
            echo "Output of above step- ${{ steps.scripts_required_to_run.outputs.shadow_db_run_successful }}"        
            if [[ "${{ steps.scripts_required_to_run.outputs.shadow_db_run_successful }}" == "true" ]]; then
                subject="DB script updates completed on Production DB."
            else
                subject="Error in script execution on Shadow DB."
            fi
            echo "email-subject=$subject" >> "$GITHUB_OUTPUT"

      - name: Send notification email to the team about script status        
        uses: dawidd6/action-send-mail@v3
        with:
            server_address: smtp.gmail.com
            server_port: 465
            secure: true
            from:  ${{ env.SENDER_EMAIL_ID }}
            to: ${{ env.RECEIVER_EMAIL_ID }}
            username:  ${{env.SENDER_EMAIL_ID}}
            password: ${{ secrets.SMTP_PASSWORD }}
            subject: ${{ steps.notification-content.outputs.email-subject }}                  
            body:  |
                DB migration script automation run completed. Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                Please check the logs and take corrective action, if required.
        
      

       
   