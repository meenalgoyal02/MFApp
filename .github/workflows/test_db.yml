name: DB script using matrix 

on: push

env:
  AWS_REGION: 'us-east-1'
  RDS_HOST: 'pocdb1.ciwtq0frolty.us-east-1.rds.amazonaws.com'
  RDS_PORT: '5432'
  RDS_USERNAME: 'postgres'
  PGPASSWORD: ${{ secrets.RDS_PASSWORDS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  migration-required-or-not:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - folder: 'src/migrations/ddl'
            migration_column: 'ddl' 
          - folder: 'src/migrations/triggers'
            migration_column: 'triggers' 
          - folder: 'src/migrations/stored_procedures'
            migration_column: 'stored_procedure'             
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Get migration history version
        id: get_migration_history
        run: |          
          query_output=$(psql -h $RDS_HOST -p $RDS_PORT -U $RDS_USERNAME -d poc -t -c "select ${{ matrix.migration_column }} from \"_MigrationsHistory\" order by migration_id desc limit 1" 2>&1)
          echo "Output- $query_output"

          echo "${{ matrix.migration_column }}=$query_output" >> $GITHUB_OUTPUT
        #   echo "::set-output name=migration_history_version::$query_output"
        #   echo "MigrationHistoryVersion=$query_output" >> "$GITHUB_OUTPUT"
    outputs:
            ddl: ${{ steps.get_migration_history.outputs.ddl }}
            triggers: ${{ steps.get_migration_history.outputs.triggers }}
            stored_procedure: ${{ steps.get_migration_history.outputs.stored_procedure }}
  get-files-from-folder:
    runs-on: ubuntu-latest
    needs: migration-required-or-not 
    strategy:
        matrix:
          include:
            - folder: 'src/migrations/ddl'
              db_version: ${{ needs.migration-required-or-not.outputs.ddl }} 
              migration_column: 'ddl' 
            - folder: 'src/migrations/triggers'
              db_version: ${{ needs.migration-required-or-not.outputs.triggers }}
              migration_column: 'triggers' 
            - folder: 'src/migrations/stored_procedures'
              db_version: ${{ needs.migration-required-or-not.outputs.stored_procedure }} 
              migration_column: 'stored_procedure'    
    outputs:
        ddl_dbUpdateRequired: ${{steps.filename_read.outputs.ddl_dbUpdateRequired}}
        ddl_scriptFileHash: ${{steps.filename_read.outputs.ddl_scriptFileHash}}
        triggers_dbUpdateRequired: ${{steps.filename_read.outputs.triggers_dbUpdateRequired}}
        triggers_scriptFileHash: ${{steps.filename_read.outputs.triggers_scriptFileHash}}
        stored_procedure_dbUpdateRequired: ${{steps.filename_read.outputs.stored_procedure_dbUpdateRequired}}
        stored_procedure_scriptFileHash: ${{steps.filename_read.outputs.stored_procedure_scriptFileHash}}     
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Print results of above step
        run: |
         echo 'Result of version- ${{ matrix.db_version }}'
         
      - name: Get all the scripts from configured folder
        id: filename_read
        run: |
           migrationHistoryVersion="${{  matrix.db_version }}"
           MIGRATION_FOLDER=${{ matrix.folder }}
           echo "migrationHistoryVersion: $migrationHistoryVersion"
           shopt -s dotglob
 
           declare -A scriptFileHash
           db_updateRequired=false
 
           for file in $(ls "$MIGRATION_FOLDER"); do
             echo "File name:$file"
             scriptFiles=(${scriptFiles[@]} "$file")
             IFS='_' read -ra splitName <<< "$file"
             scriptFileHash["${splitName[0]}"]="${file}"
           done
 
           # Get script file name with succeeding version number
           for key in "${!scriptFileHash[@]}"; do
             if [ "$key" -gt "$migrationHistoryVersion" ];then 
               db_updateRequired=true
               echo "There is a script file with higher version number than Migration History version."
               break
             fi
           done
 
           # echo "Can run further: ${db_updateRequired}"
           # Convert scriptFileHash to JSON string
           hashmap_json="{"
           first=true
           for key in "${!scriptFileHash[@]}"; do
             if [ "$first" = true ]; then
               first=false
             else
               hashmap_json+=","
             fi
             hashmap_json+="\"$key\":\"${scriptFileHash[$key]}\""
           done
           hashmap_json+=$(printf '%s' '}')
           echo "$hashmap_json"
 
           # Set the output
           echo "::set-output name=${{ matrix.migration_column }}_dbUpdateRequired::$db_updateRequired"
           echo "::set-output name=${{ matrix.migration_column }}_scriptFileHash::$hashmap_json"
      
