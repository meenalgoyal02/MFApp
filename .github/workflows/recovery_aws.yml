name: Recovery steps in Secondary region.
on: 
  workflow_call:
    inputs:
      resource_type:
        description: 'The type of resource to bring down'
        default: 'ec2'
        required: true
        type: string
    secrets:    
      AWS_ACCESS_KEY_ID:
            required: true
            
      AWS_SECRET_ACCESS_KEY:
                required: true
      SMTP_PASSWORD:
              required: true
    outputs:
      region-failover-successful:
          description: "Boolean value to indicate whether region down was successful or not"
          value: ${{ jobs.aws-cli-in-github-actions.outputs.region-up-or-not }}   
      conclusion:
          description: "Conclusion text that can be sent for notification"             
          value: ${{ jobs.aws-cli-in-github-actions.outputs.conclusion }}   

jobs:
    aws-cli-in-github-actions:
      outputs: 
        region-up-or-not: ${{ steps.verify-region-is-up.outputs.Region-up }}
        conclusion: ${{ steps.conclusion.outputs.value }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2

        - name: Set Environment Variables from File
          if: ${{ inputs.resource_type == 'ec2'}}
          uses: ./.github/actions/setup-environment
          with:
              var_file_path: ./.github/variables/recovery_aws.env
      
        - name: Set Environment Variables from File
          if: ${{ inputs.resource_type == 'ecs'}}
          uses: ./.github/actions/setup-environment
          with:
              var_file_path: ./.github/variables/recovery_ecs.env

        - uses: actions/setup-python@v2
          with:
            python-version: '3.10'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install awscli
        
        - name: start date and time
          id: start-date
          run: |
              currentDate=$(echo $(date -u))
              echo "Current date-${currentDate}"
              echo "value=$currentDate">>"$GITHUB_OUTPUT"

        - name: Retrieve ecs cluster arn
          continue-on-error: true
          id: get-ecs-cluster-by-tag-name
          if: ${{ inputs.resource_type == 'ecs' }}
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_REGION }}              
            resource-type: 'ecs-cluster'               
            resource-name: ''              
            resource-tag-name: ${{ env.TAG_KEY }}              
            resource-tag-value: ${{ env.TAG_VALUE }}
    
        - name: Retrieve ecs service arn
          continue-on-error: true
          id: get-ecs-service-id
          if: ${{ inputs.resource_type == 'ecs' && steps.get-ecs-cluster-by-tag-name.outputs.resource-id !='' }}
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_REGION }}              
            resource-type: 'ecs-service'               
            resource-name: ${{ steps.get-ecs-cluster-by-tag-name.outputs.resource-id }}              
            resource-tag-name: ${{ env.TAG_KEY }}              
            resource-tag-value: ${{ env.TAG_VALUE }}


        - name: Set desired capacity in the region
          id: recover-asg  
          continue-on-error: true     
          run: |
            input_resource=${{ inputs.resource_type }}
            if [[ "$input_resource" == "ec2" ]]; then
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --desired-capacity $DESIRED_CAPACITY --min-size $MIN_CAPACITY --max-size $MAX_CAPACITY --region $AWS_REGION
            else
                clusterId=${{ steps.get-ecs-cluster-by-tag-name.outputs.resource-id }}
                serviceId=${{ steps.get-ecs-service-id.outputs.resource-id }}
               # echo "ECS service id-$serviceId"
                aws ecs update-service --cluster $clusterId --service $serviceId --desired-count $DESIRED_CAPACITY --region $AWS_REGION
            fi

        - name: Retrieve id of hosted-zone
          continue-on-error: true
          id: get-hosted-zone-id 
          if: ${{ steps.recover-asg.outcome == 'success' }}
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_REGION }}              
            resource-type: 'hosted-zone'               
            resource-name: ''               
            resource-tag-name: 'Purpose'              
            resource-tag-value: 'SRE-POC' 


        - name: Retrieve DNS name of load balancer for secondary region
          continue-on-error: true
          if: ${{ steps.recover-asg.outcome == 'success' }}
          id: secondary-alb-dns-name 
          uses: ./.github/actions/get_resource_by_id
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}            
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}              
            aws-region: ${{ env.AWS_REGION }}              
            resource-type: 'ALB'               
            resource-name: ''               
            resource-tag-name: ${{ env.ALB_TAG_KEY }}              
            resource-tag-value: ${{ env.ALB_TAG_VALUE }}                   
                
   
        - name: Set Route53 weight in alternate region
          continue-on-error: true
          id: disaster-recovery        
          if: ${{ steps.secondary-alb-dns-name.outputs.resource-id !='' && steps.get-hosted-zone-id.outputs.resource-id !='' }}
          run: |
           # TTL/ Weight should be set via variables config
            hosted_zone_id=${{ steps.get-hosted-zone-id.outputs.resource-id }}
            echo "Hosted-zone id-$hosted_zone_id"
            alb_id=${{ steps.secondary-alb-dns-name.outputs.resource-id }}
            echo "ALB id-$alb_id"
            set route 53 records update           
            CHANGE_OUTPUT=$(aws route53 change-resource-record-sets --hosted-zone-id ${hosted_zone_id} --change-batch "{ \"Comment\": \"Changes weights of passive region from 0 to 100\",\"Changes\": [{ \"Action\": \"UPSERT\",
            \"ResourceRecordSet\": {\"Name\": \"${{ env.CNAME }}\", \"Type\": \"CNAME\", \"SetIdentifier\": \"${{ env.SECONDARY_CNAME_IDENTIFIER }}\",\"Weight\": ${CNAME_WEIGHT},\"TTL\":${TTL},\"ResourceRecords\":[{\"Value\":\" ${alb_id} \"}]  }}]}")
            echo "Change Output: $CHANGE_OUTPUT"
            CHANGE_ID=$(echo $CHANGE_OUTPUT | jq -r '.ChangeInfo.Id')
            echo "Change ID: $CHANGE_ID"
            echo "::set-output name=change_id::$CHANGE_ID"
        
        - name: Wait for Route53 Change to Become INSYNC
          if: ${{ steps.disaster-recovery.outcome == 'success' }}
          continue-on-error: true
          id: wait-for-insync
          run: |
              CHANGE_ID=${{ steps.disaster-recovery.outputs.change_id }}
              STATUS="PENDING"
              i=1
              while [[ "$STATUS" != "INSYNC" ]]; do
              if(($i>10)); then
                break;
              fi;
                echo "Waiting for change $CHANGE_ID to become INSYNC..."
                STATUS=$(aws route53 get-change --id $CHANGE_ID | jq -r '.ChangeInfo.Status')
                echo "Current status: $STATUS"
                if [ "$STATUS" != "INSYNC" ]; then
                  echo "Not in sync yet. Sleeping for 30 seconds..."
                  sleep 30
                  echo "$i"
                  i=$((i + 1))
                fi
              done

              if [ "$STATUS" != "INSYNC" ]; then
                echo "Change $CHANGE_ID is not INSYNC."  
              else
                echo "Change $CHANGE_ID is now INSYNC."  
              fi;
        - name: Verify whether the URL is up or not
          continue-on-error: true
          id: verify-region-is-up
          run: | 
            i=1  
            HTTP_STATUS=$(curl -s -o /dev/null -I -w "%{http_code}" "${{ env.CNAME }}")
            while [ "$HTTP_STATUS" != "200" ]; do
              if(($i>10)); then
                    echo "${i}"
                    break;
              fi;
              echo "Waiting for url to get available"
              HTTP_STATUS=$(curl -s -o /dev/null -I -w "%{http_code}" "${{ env.CNAME }}")
              echo "Current status: $HTTP_STATUS"
              if [ "$HTTP_STATUS" -eq 200 ]; then
                echo "Region up completed."
                echo "::set-output name=Region-up::true"
                echo "::set-output name=Email-subject:: AWS region is up for Repository- ${{ github.repository }}"
              else 
                echo "URL not yet available. Sleeping for 30 seconds..."
                sleep 30
                echo "${i}"
                i=$((i + 1))
              fi;
            done                   
            if [ "$HTTP_STATUS" -eq 503 ]; then
              echo "Region up could not be completed."
              echo "::set-output name=Region-up::false"
              echo "::set-output name=Email-subject:: Failed in setting AWS region up. "
            else
              echo "Region up completed."
              echo "::set-output name=Region-up::true"
              echo "::set-output name=Email-subject:: AWS region is up for Repository- ${{ github.repository }}"               
            fi;

        - name: end date and time
          continue-on-error: true
          id: end-date
          run: |
              currentDate=$(echo $(date -u))
              echo "Current date-${currentDate}"
              echo "value=$currentDate">>"$GITHUB_OUTPUT"

        - name: action run summary
          continue-on-error: true
          id: conclusion
          run: |

            start_time=$(date -u -d "${{ steps.start-date.outputs.value }}" +%s)
            end_time=$(date -u -d "${{ steps.end-date.outputs.value }}" +%s)
            duration=$((end_time - start_time))
            total_duration=$(echo $((duration / 3600)) hours $(((duration % 3600) / 60)) minutes $((duration % 60)) seconds)
            echo "Total duration: $total_duration"

            outcomeOfHostUpdate="${{ steps.disaster-recovery.outcome }}"
            outcomeOfASGUpdate="${{ steps.recover-asg.outcome }}"

            if [[ "$outcomeOfHostUpdate" == "failure" || "$outcomeOfASGUpdate" == "failure" ]]; then
              value="<h3>Failure recovery failed. Please check the input values supplied.</h3>"
            else
              value="<h3>Failure recovery completed.</h3>"
            fi;
            
            input_resource=${{ inputs.resource_type }}
            if [[ "$input_resource" == "ec2" ]]; then
               impactedResourcesString='<figure class="table" style="width:100.2%;"> <table class="ck-table-resized"> <colgroup> <col style="width:39.82%;"> <col style="width:55.43%;"></colgroup> <tbody> <tr> <td><div> <div><span style="color:#0000ff;">Auto Scaling Group</span></div> </div></td> <td> ${{ env.ASG_NAME }}</td></tr> <tr> <td> <div> <div><span style="color:#0000ff;">Hosted-zone</span></div> </div> </td> <td>${{ env.CNAME }}</td> </tr> </tbody> </table> </figure>'
            else
               
               impactedResourcesString='<figure class="table" style="width:100.2%;"> <table class="ck-table-resized"> <colgroup> <col style="width:39.82%;"> <col style="width:55.43%;"></colgroup> <tbody> <tr> <td><div> <div><span style="color:#546e7a;">ECS Service</span></div> </div></td> <td> ${{ steps.get-ecs-service-id.outputs.resource-id }}</td></tr> <tr> <td> <div> <div><span style="color:#546e7a;">Hosted-zone</span></div> </div> </td> <td>${{ env.CNAME }}</td> </tr> </tbody> </table> </figure>'
            fi;
            impactedResources="${impactedResourcesString//\"/\\\"}" 
            conclusionString_begin+='<h4>Conclusion :${{ steps.verify-region-is-up.outputs.Email-subject }}</h4><figure class="table"> <table> <tbody> <tr> <td>1.</td> <td><strong>Activity Name</strong></td> <td>AWS Region Failure recovery.</td>  </tr> <tr> <td>2.</td> <td><strong>AWS Region</strong></td> <td>${{ env.AWS_REGION }}</td>  </tr> <tr> <td>3.</td> <td><strong>Impacted resources</strong></td>'
            
            conclusionString_end="</tr> <tr> <td>4.</td> <td><strong>Activity Start Time</strong></td> <td>${{ steps.start-date.outputs.value }}</td>  </tr> <tr> <td>5.</td> <td><strong>Activity End Time</strong></td> <td>${{ steps.end-date.outputs.value }}</td>  </tr></tr> <tr> <td>6.</td> <td><strong>Service Name </strong></td><td></td> </tr><tr> <td>7.</td> <td><strong>CI Id </strong></td><td></td>  </tr><tr> <td>8.</td> <td><strong>Duration of execution</strong></td> <td>${total_duration}</td> </tr><tr><td>9.</td> <td><strong>RTO </strong></td><td> 8 Min</td>  </tr> </tbody> </table> </figure>"
            
            value+="${conclusionString_begin//\"/\\\"}"
            value+=<td>$impactedResources</td>
            value+=$conclusionString_end          
            echo "value=$value">>"$GITHUB_OUTPUT"
            echo "Email content-$value"